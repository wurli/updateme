[{"path":"https://wurli.github.io/updateme/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 updateme authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wurli.github.io/updateme/articles/package-sources.html","id":"package-sources","dir":"Articles","previous_headings":"","what":"Package Sources","title":"package-sources","text":"Packages can installed number locations. {updateme} package seeks examine original source package newer versions load-time: E.g. installed package CRAN using install.packages(), CRAN checked newer versions (using available.packages()) E.g. installed package GitHub using pak::pak(), GitHub checked newer versions may , say, installing package CRAN, want {updateme} check GitHub possible updates. configurable…. ………","code":""},{"path":[]},{"path":"https://wurli.github.io/updateme/articles/package-sources.html","id":"cran-install-packages","dir":"Articles","previous_headings":"Package Sources","what":"CRAN / install.packages()","title":"package-sources","text":"","code":"Repository: CRAN Date/Publication: 2023-09-27 09:20:06 UTC Built: R 4.3.1; aarch64-apple-darwin20; 2023-09-27 11:18:47 UTC; unix Archs: lubridate.so.dSYM"},{"path":"https://wurli.github.io/updateme/articles/package-sources.html","id":"cran-pakpak","dir":"Articles","previous_headings":"Package Sources","what":"CRAN / pak::pak()","title":"package-sources","text":"","code":"Repository: CRAN Date/Publication: 2023-09-27 09:20:06 UTC Built: R 4.3.1; aarch64-apple-darwin20; 2023-09-27 11:18:47 UTC; unix Archs: lubridate.so.dSYM RemoteType: standard RemotePkgRef: lubridate RemoteRef: lubridate RemoteRepos: https://cran.rstudio.com/ RemotePkgPlatform: aarch64-apple-darwin20 RemoteSha: 1.9.3"},{"path":"https://wurli.github.io/updateme/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Scott. Author, maintainer.","code":""},{"path":"https://wurli.github.io/updateme/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scott J (2024). updateme: Informative Messages Outdated Packages. R package version 0.1.0, https://wurli.github.io/updateme/, https://github.com/wurli/updateme.","code":"@Manual{,   title = {updateme: Informative Messages About Outdated Packages},   author = {Jacob Scott},   year = {2024},   note = {R package version 0.1.0, https://wurli.github.io/updateme/},   url = {https://github.com/wurli/updateme}, }"},{"path":"https://wurli.github.io/updateme/index.html","id":"updateme","dir":"","previous_headings":"","what":"Informative Messages About Outdated Packages","title":"Informative Messages About Outdated Packages","text":"{updateme} modifies library() tell package date gets loaded:","code":""},{"path":"https://wurli.github.io/updateme/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Informative Messages About Outdated Packages","text":"{updateme} yet CRAN, can install GitHub using {pak}:","code":"# install.packages(\"pak\") pak::pak(\"wurli/updateme\")"},{"path":"https://wurli.github.io/updateme/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Informative Messages About Outdated Packages","text":"use {updateme}, simply call library(updateme) loading packages. may find ’d like {updateme} available time; case, consider adding snippet .Rprofile:","code":"# If {updateme} isn't installed... if (!requireNamespace(\"updateme\", quietly = TRUE)) {    # If {pak} isn't installed...   if (!requireNamepsace(\"pak\", quietly = TRUE)) {        # Install {pak} from CRAN     install.packages(\"pak\")   }      # Use {pak} to install {updateme} from GitHub   pak::pak(\"wurli/updateme\") }  library(updateme)"},{"path":[]},{"path":"https://wurli.github.io/updateme/index.html","id":"package-sources","dir":"","previous_headings":"Configuration","what":"Package sources","title":"Informative Messages About Outdated Packages","text":"default, new versions packages looked location seem installed . installed CRAN (e.g. using install.packages()), {updateme} check CRAN newer version, similarly packages installed GitHub GitLab. doesn’t work , can override behaviour using updateme_sources_set(): Packages installed Bioconductor, remotes Bitbucket yet supported.","code":"# ~~ Set the `repos` global option ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # If you want to check non-standard repos for new versions of packages, # you'll first have to set the repos global option. Note that each # option must be named for compatibility with {updateme}. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ options(repos = c(    # Your default repos, e.g. c(CRAN = \"https://cloud.r-project.org\")   getOption(\"repos\"),    # The tidyverse r-universe, including dev versions of tidyverse packages   tidyverse = \"https://tidyverse.r-universe.dev\",    # The r-lib r-universe, including dev versions of infrastructure packages   # like {cli}, {rlang}, etc   rlib = \"https://r-lib.r-universe.dev\" ))  # ~~ Set the `updateme.sources` global option ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # 1. New versions will first be looked up in the tidyverse r-universe # 2. If not found, they will be looked up from your usual CRAN mirror # 3. {bslib} will always be first looked up from GitHub # 4. {cli} will always be first looked up from the r-lib r-universe # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ updateme_sources_set(   \"tidyverse\",   \"CRAN\",   bslib = \"https://github.com/rstudio/bslib\", # Name is optional here   cli = \"rlib\" )"},{"path":"https://wurli.github.io/updateme/index.html","id":"caching","dir":"","previous_headings":"Configuration","what":"Caching","title":"Informative Messages About Outdated Packages","text":"caching downloads used make calls library() pretty quick. cache resets every hour, can configure like :","code":"# Set the cache expiry time to 30 minutes options(updateme.cache_expiry = 30)"},{"path":"https://wurli.github.io/updateme/reference/updateme-package.html","id":null,"dir":"Reference","previous_headings":"","what":"updateme: Informative Messages About Outdated Packages — updateme-package","title":"updateme: Informative Messages About Outdated Packages — updateme-package","text":"package loaded, source repository checked new versions. message show console indicating whether package date.","code":""},{"path":[]},{"path":"https://wurli.github.io/updateme/reference/updateme-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"updateme: Informative Messages About Outdated Packages — updateme-package","text":"Maintainer: Jacob Scott jscott2718@gmail.com","code":""},{"path":"https://wurli.github.io/updateme/reference/updateme_sources_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure updateme lookup of new package versions — updateme_sources_set","title":"Configure updateme lookup of new package versions — updateme_sources_set","text":"function helper setting \"updateme.sources\" global option. provides user-friendly interface validation options set.","code":""},{"path":"https://wurli.github.io/updateme/reference/updateme_sources_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure updateme lookup of new package versions — updateme_sources_set","text":"","code":"updateme_sources_set(...)"},{"path":"https://wurli.github.io/updateme/reference/updateme_sources_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure updateme lookup of new package versions — updateme_sources_set","text":"... Named unnamed arguments. Values either: \"github\": new versions found package development version GitHub, repo can identified using package DESCRIPTION One names(getOption(\"repo\")): latest versions taken source, available URL pointing GitHub repo, e.g. \"https://github.com/wurli/updateme\": latest version particular package taken project arguments named, names indicate package option apply . unnamed, option apply packages. See examples information.","code":""},{"path":"https://wurli.github.io/updateme/reference/updateme_sources_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure updateme lookup of new package versions — updateme_sources_set","text":"result setting options(updateme.sources = <new_options>)","code":""},{"path":"https://wurli.github.io/updateme/reference/updateme_sources_set.html","id":"private-repositories","dir":"Reference","previous_headings":"","what":"Private Repositories","title":"Configure updateme lookup of new package versions — updateme_sources_set","text":"updateme supports packages stored private repositories GitHub GitLab. get upstream package version either, configure personal access token (PAT). GitHub packages, updateme checks, order: UPDATEME_GITHUB_PAT environmental variable personal access tokens configured using gitcreds::gitcreds_set() GITHUB_PAT environmental variable GITHUB_TOKEN environmental variable GitLab packages, updateme checks, order: UPDATEME_GITLAB_PAT environmental variable personal access tokens configured using gitcreds::gitcreds_set() GITLAB_PAT environmental variable GITLAB_TOKEN environmental variable","code":""},{"path":"https://wurli.github.io/updateme/reference/updateme_sources_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure updateme lookup of new package versions — updateme_sources_set","text":"","code":"if (FALSE) {    # If you want to check non-standard repos for new versions of packages,   # you'll first have to set the repos global option. Note that each   # option must be named for compatibility with {updateme}   options(repos = c(      # Your default repos, e.g. c(CRAN = \"https://cloud.r-project.org\")     getOption(\"repos\"),      # The tidyverse r-universe, including dev versions of tidyverse packages     tidyverse = \"https://tidyverse.r-universe.dev\",      # The r-lib r-universe, including dev versions of infrastructure packages     # like {cli}, {rlang}, etc     rlib = \"https://r-lib.r-universe.dev\"   ))    # 1. New versions will first be looked up in the tidyverse r-universe   # 2. If not found, they will be looked up from your usual CRAN mirror   # 3. {bslib} will always be first looked up from GitHub   # 4. {cli} will always be first looked up from the r-lib r-universe   updateme_sources_set(     \"tidyverse\",     \"CRAN\",     bslib = \"https://github.com/rstudio/bslib\", # Name is optional here     cli = \"rlib\"   ) }"}]
